name: Integration test
description: Run integration test

inputs:
  environment:
    description: Environment that would like to deploy services
    required: true
    default: sit
  cluster_prefix:
    description: cluster prefix
    required: false
    default: dime
  application_name:
    description: Name of application
    required: true
  language:
    description: The program language of this repository
    required: true
  device:
    description: Device ID for run integration test
    required: false
  minimum_coverage:
    description: "The minimum coverage to pass the check. Optional. Default: `0` (always passes)"
    required: false
    default: "0"
  migration:
    description: Enable/disable to run database migration job
    required: false
  migrate_dir:
    description: Specify the directory containing migration files
    required: false
    default: ./db/migrations
  migrate_schema:
    description: Specify the schema file location
    required: false
    default: ./db/schema.sql
  slack_channel:
    description: The slack channel that send notification.
    required: true
  slack_webhook:
    description: The slack webhook url
    required: true
  gh_access_token:
    description: GitHub access token
    required: true

runs:
  using: composite
  steps:
    - name: prepare integration test environment
      id: setup
      if: ${{ inputs.language == 'golang' }}
      shell: bash
      run: |
        git clone https://github.com/kkp-dfs/dime-helm.git
        cd dime-helm
        git fetch
        git reset ${{ inputs.helm_ref }} --hard

        yq eval-all '. as $item ireduce({}; . * $item)' values/${{ inputs.application_name }}/values.yaml values/${{ inputs.application_name }}/values-${{ inputs.environment }}.yaml > values.yaml
        VAULT_USERNAME=$(cat values.yaml | yq eval '.application.values.secrets.default.data.DB_USERNAME' - | sed -e 's/vault:/https:\/\/vault.mydime.tech\/v1\//g')
        VAULT_PASSWORD=$(cat values.yaml | yq eval '.application.values.secrets.default.data.DB_PASSWORD' - | sed -e 's/vault:/https:\/\/vault.mydime.tech\/v1\//g')
        USERNAME_KEY=$(echo $VAULT_USERNAME | cut -d '#' -f2)
        PASSWORD_KEY=$(echo $VAULT_PASSWORD | cut -d '#' -f2)

        JWT=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
        echo "{\"role\":\"kubernetes-actions-runner\",\"jwt\":\"$JWT\"}" > payload.json
        TOKEN=$(curl -d @payload.json https://vault.mydime.tech/v1/auth/kubernetes/actions-runner/${{ inputs.cluster_prefix }}-${{ inputs.environment }}/login | jq -r '.auth.client_token')

        VAULT_URL=https://vault.mydime.tech/v1/secrets/data/database$(echo ${{ inputs.cluster_prefix }}-${{ inputs.environment }} | sed -e 's/dime-/\//g' | sed -e 's/-/\//g')
        DB=$(curl -H "X-Vault-Token:$TOKEN" $VAULT_URL)
        DB_HOST=$(cat values.yaml | yq eval '.application.values.configmaps.default.data.DB_HOST' -)
        DB_PORT=$(cat values.yaml | yq eval '.application.values.configmaps.default.data.DB_PORT' -)
        DB_NAME=$(cat values.yaml | yq eval '.application.values.configmaps.default.data.DB_DATABASE' -)-${{ github.sha }}
        DB_USER=$(cat values.yaml | yq eval '.application.values.configmaps.default.data.DB_DATABASE' -)-${{ github.sha }}
        DB_PASS=${{ github.sha }}
        DB_ADMIN_USER=$(echo $DB | jq -r '.data.data.username')
        DB_ADMIN_PASS=$(echo $DB | jq -r '.data.data.password')
        echo "::set-output name=db_host::${DB_HOST}"
        echo "::set-output name=db_port::${DB_PORT}"
        echo "::set-output name=db_admin_user::$(echo ${DB_ADMIN_USER} | base64)"
        echo "::set-output name=db_admin_pass::$(echo ${DB_ADMIN_PASS} | base64)"
        echo "::set-output name=db_name::${DB_NAME//-/_}"
        echo "::set-output name=db_user::${DB_USER:0:32}"
        echo "::set-output name=db_pass::${DB_PASS}"

        mysql --host=${DB_HOST} --port=${DB_PORT} -u $DB_ADMIN_USER -p${DB_ADMIN_PASS} -e "CREATE DATABASE IF NOT EXISTS ${DB_NAME//-/_} CHARACTER SET utf8mb4 COLLATE utf8mb4_bin;"
        mysql --host=${DB_HOST} --port=${DB_PORT} -u $DB_ADMIN_USER -p${DB_ADMIN_PASS} -e "CREATE USER IF NOT EXISTS '${DB_USER:0:32}'@'%' IDENTIFIED BY '${DB_PASS}';"
        mysql --host=${DB_HOST} --port=${DB_PORT} -u $DB_ADMIN_USER -p${DB_ADMIN_PASS} -e "GRANT ALL PRIVILEGES ON ${DB_NAME//-/_}.* TO '${DB_USER:0:32}'@'%'; FLUSH PRIVILEGES;"
        if [ "${{ inputs.migration }}" == "true" ]; then
          cd ../
          dbmate --wait -d ${{ inputs.migrate_dir }} -s ${{ inputs.migrate_schema }} -u mysql://${DB_ADMIN_USER}:${DB_ADMIN_PASS}@${DB_HOST}/${DB_NAME//-/_} up
        fi

        RMQ=$(curl -H "X-Vault-Token:$TOKEN" https://vault.mydime.tech/v1/secrets/data/rabbitmq/sit)
        RMQ_HOST=k8s-rabbitmq-rmqserve-74cb1dc39b-c9c3c8b01ed8ac4a.elb.ap-southeast-1.amazonaws.com
        RMQ_PORT=5672
        RMQ_ADMIN_USER=$(echo $RMQ | jq -r '.data.data.admin_username')
        RMQ_ADMIN_PASS=$(echo $RMQ | jq -r '.data.data.admin_password')
        RMQ_VHOST=${{ inputs.application_name }}-${{ github.sha }}
        RMQ_USER=${{ inputs.application_name }}-${{ github.sha }}
        RMQ_PASS=${{ github.sha }}
        echo "::set-output name=rmq_host::${RMQ_HOST}"
        echo "::set-output name=rmq_port::${RMQ_PORT}"
        echo "::set-output name=rmq_admin_user::$(echo ${RMQ_ADMIN_USER} | base64)"
        echo "::set-output name=rmq_admin_pass::$(echo ${RMQ_ADMIN_PASS} | base64)"
        echo "::set-output name=rmq_vhost::${RMQ_VHOST}"
        echo "::set-output name=rmq_user::${RMQ_USER}"
        echo "::set-output name=rmq_pass::${RMQ_PASS}"

        curl -X PUT -u "${RMQ_ADMIN_USER}:${RMQ_ADMIN_PASS}" http://${RMQ_HOST}:15672/api/vhosts/${RMQ_VHOST}
        curl -X PUT -u "${RMQ_ADMIN_USER}:${RMQ_ADMIN_PASS}" -d "{\"password\":\"${RMQ_PASS}\",\"tags\":\"management\"}" http://${RMQ_HOST}:15672/api/users/${RMQ_USER}
        curl -X PUT -u "${RMQ_ADMIN_USER}:${RMQ_ADMIN_PASS}" -d "{\"configure\":\".*\",\"write\":\".*\",\"read\":\".*\"}" http://${RMQ_HOST}:15672/api/permissions/${RMQ_VHOST}/${RMQ_USER}

        REDIS=$(curl -H "X-Vault-Token:$TOKEN" https://vault.mydime.tech/v1/secrets/data/redis/sit)
        REDIS_HOST=redis-master.shared.svc.cluster.local
        REDIS_PORT=6379
        REDIS_ADMIN_PASS=$(echo $REDIS | jq -r '.data.data.admin_password')
        echo "::set-output name=redis_host::${REDIS_HOST}"
        echo "::set-output name=redis_port::${REDIS_PORT}"
        echo "::set-output name=redis_pass::${REDIS_ADMIN_PASS}"
    - name: Run go integration test
      if: ${{ inputs.language == 'golang' }}
      shell: bash
      env:
        INTEGRATION_ON_SIT: "true"
        DB_HOST: ${{ steps.setup.outputs.db_host }}
        DB_PORT: ${{ steps.setup.outputs.db_port }}
        DB_DATABASE: ${{ steps.setup.outputs.db_name }}
        DB_USERNAME: ${{ steps.setup.outputs.db_user }}
        DB_PASSWORD: ${{ steps.setup.outputs.db_pass }}
        RABBITMQ_HOST: ${{ steps.setup.outputs.rmq_host }}
        RABBITMQ_PORT: ${{ steps.setup.outputs.rmq_port }}
        RABBITMQ_VHOST: ${{ steps.setup.outputs.rmq_vhost }}
        RABBITMQ_USERNAME: ${{ steps.setup.outputs.rmq_user }}
        RABBITMQ_PASSWORD: ${{ steps.setup.outputs.rmq_pass }}
        REDIS_HOST: ${{ steps.setup.outputs.redis_host }}
        REDIS_PORT: ${{ steps.setup.outputs.redis_port }}
        REDIS_PASSWORD: ${{ steps.setup.outputs.redis_pass }}
      run: |
        export PATH=$HOME/go/bin:$(go env GOPATH)/bin:/go/bin:$PATH
        touch $HOME/.ack-ginkgo-rc
        make integration-test

    # - name: Run node unit test
    #   if: ${{ inputs.language == 'node' }}
    #   uses: docker://mcr.microsoft.com/playwright:focal
    #   with:
    #     args: >-
    #       yarn test:e2e --reporter list
    #       --output /tmp/test-reports
    #       --project Galaxy-S5
    #       --project iphone-se
    #       --project iphone-12-pro-max
    #       --project ipad-mini

    - name: Run flutter integration test
      if: ${{ inputs.language == 'flutter' }}
      shell: bash
      run: flutter test -d ${{ inputs.device }} --flavor sit integration_test

    - id: success_message
      if: ${{ success() }}
      shell: bash
      run: |
        echo "::set-output name=color::#2EB67D"
        echo "::set-output name=title::${{ inputs.application_name }} integration test is PASS"
        echo "::set-output name=message::All test case is PASS"

    - id: fail_message
      if: ${{ failure() }}
      shell: bash
      run: |
        echo "::set-output name=color::#E01E5A"
        echo "::set-output name=title::${{ inputs.application_name }} integration test is FAIL"
        echo "::set-output name=message::Found some failed test cases"

    - name: Slack Notification
      if: ${{ always() }}
      uses: slackapi/slack-github-action@v1.18.0
      with:
        payload: |
          {
            "text": "${{ steps.fail_message.outputs.title || steps.success_message.outputs.title }}",
            "attachments": [
              {
                "color": "${{ steps.fail_message.outputs.color || steps.success_message.outputs.color }}",
                "blocks": [
                  {
                    "type": "context",
                    "elements": [
                      {
                        "type": "image",
                        "image_url": "${{ github.event.sender.avatar_url }}",
                        "alt_text": "${{ github.event.sender.login }}"
                      },
                      {
                        "type": "mrkdwn",
                        "text": "${{ github.event.sender.login }}"
                      }
                    ]
                  },
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": "${{ steps.fail_message.outputs.message || steps.success_message.outputs.message }}"
                    },
                    "fields": [
                      {
                        "type": "mrkdwn",
                        "text": "*Repository*"
                      },
                      {
                        "type": "mrkdwn",
                        "text": "*Event*"
                      },
                      {
                        "type": "mrkdwn",
                        "text": "<${{ github.server_url }}/${{ github.repository }}|${{ github.repository }}>"
                      },
                      {
                        "type": "mrkdwn",
                        "text": "${{ github.event_name }}"
                      },
                      {
                        "type": "mrkdwn",
                        "text": "*Ref*"
                      },
                      {
                        "type": "mrkdwn",
                        "text": "*Commit*"
                      },
                      {
                        "type": "mrkdwn",
                        "text": "${{ github.ref_name }}"
                      },
                      {
                        "type": "mrkdwn",
                        "text": "<${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}|${{ github.sha }}>"
                      }
                    ]
                  }
                ]
              }
            ]
          }
      env:
        SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
        SLACK_WEBHOOK_URL: ${{ inputs.slack_webhook }}

    - name: Tear down integration test environment
      if: ${{ always() }}
      shell: bash
      run: |
        DB_HOST=${{ steps.setup.outputs.db_host }}
        DB_PORT=${{ steps.setup.outputs.db_port }}
        DB_ADMIN_USER=$(echo ${{ steps.setup.outputs.db_admin_user }} | base64 -d)
        DB_ADMIN_PASS=$(echo ${{ steps.setup.outputs.db_admin_pass }} | base64 -d)
        DB_NAME=${{ steps.setup.outputs.db_name }}
        DB_USER=${{ steps.setup.outputs.db_user }}
        mysql --host=${DB_HOST} --port=${DB_PORT} -u ${DB_ADMIN_USER} -p${DB_ADMIN_PASS} -e "REVOKE ALL PRIVILEGES, GRANT OPTION FROM '${DB_USER}'@'%';"
        mysql --host=${DB_HOST} --port=${DB_PORT} -u ${DB_ADMIN_USER} -p${DB_ADMIN_PASS} -e "DROP USER '${DB_USER}'@'%';"
        mysql --host=${DB_HOST} --port=${DB_PORT} -u ${DB_ADMIN_USER} -p${DB_ADMIN_PASS} -e "DROP DATABASE ${DB_NAME};"

        RMQ_HOST=${{ steps.setup.outputs.rmq_host }}
        RMQ_VHOST=${{ steps.setup.outputs.rmq_vhost }}
        RMQ_USER=${{ steps.setup.outputs.rmq_user }}
        RMQ_ADMIN_USER=$(echo ${{ steps.setup.outputs.rmq_admin_user }} | base64 -d)
        RMQ_ADMIN_PASS=$(echo ${{ steps.setup.outputs.rmq_admin_pass }} | base64 -d)
        curl -X DELETE -u "${RMQ_ADMIN_USER}:${RMQ_ADMIN_PASS}" http://${RMQ_HOST}:15672/api/permissions/${RMQ_VHOST}/${RMQ_USER}
        curl -X DELETE -u "${RMQ_ADMIN_USER}:${RMQ_ADMIN_PASS}" http://${RMQ_HOST}:15672/api/users/${RMQ_USER}
        curl -X DELETE -u "${RMQ_ADMIN_USER}:${RMQ_ADMIN_PASS}" http://${RMQ_HOST}:15672/api/vhosts/${RMQ_VHOST}
