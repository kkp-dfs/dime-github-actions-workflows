name: Dime CI/CD workflow

on:
  workflow_call:
    inputs:
      repository:
        description: The owner and repository name
        required: false
        type: string
        default: ${{ github.repository }}
      node-version:
        description: Version of node that would like to install
        required: false
        type: string
        default: '16'
      go-version:
        description: Version of node that would like to install
        required: false
        type: string
        default: '^1.17.2'
      base_ref:
        description: The branch or tag ref or commit SHA that be base code.
        required: false
        type: string
        default: ${{ github.base_ref || 'main' }}
      target_ref:
        description: The branch or tag ref or commit SHA that will be merged to base code.
        required: false
        type: string
        default: ${{ github.head_ref || github.ref_name }}
      helm_ref:
        description: commit reference of helm repository
        required: false
        type: string
        default: main
      environment:
        description: Environment that would like to deploy services
        required: true
        default: sit
        type: string
      hostname:
        description: The hostname of the application service
        required: true
        type: string
      additional_hostnames:
        description: The additional hostnames of the application service
        required: false
        type: string
        default: ""
      code_lang:
        description: The program language of this repository
        required: true
        type: string
      event_name:
        description: The name of the event that triggered the workflow run.
        required: false
        type: string
        default: ${{ github.event_name }}
      event_number:
        description: The number of the event that triggered the workflow run.
        required: false
        type: string
        default: ${{ github.event.number }}
      namespace:
        description: The namespace of destination
        required: false
        type: string
        default: dime
      application_name:
        description: Name of application
        required: true
        type: string
      platforms:
        description: List of target platforms for build
        required: false
        type: string
        default: linux/amd64
      build_args:
        description: List of build-time variables
        required: false
        type: string       
      slack_channel:
        description: The slack channel that send notification.
        type: string
        required: true
      migration:
        description: Enable/disable to run database migration job
        type: boolean
        required: false
        default: false
      migrate_dir:
        description: Specify the directory containing migration files
        type: string
        required: false
        default: ./db/migrations
      migrate_schema:
        description: Specify the schema file location
        type: string
        required: false
        default: ./db/schema.sql

    secrets:
      gh_access_token:
        required: true
      slack_webhook:
        required: true

jobs:
  setup:
    name: Install dependencies and keep caches
    runs-on: [self-hosted, linux, main]
    outputs:
      ecr_token: ${{ steps.ecr.outputs.token }}
      ecr_repository: ${{ steps.ecr.outputs.repository }}
      ecr_username: ${{ steps.ecr.outputs.username }}
      ecr_password: ${{ steps.ecr.outputs.password }}
      endpoint: ${{ steps.paramater.outputs.host }}
      ref: ${{ steps.paramater.outputs.ref }}
    steps:
      - name: Setup ${{ inputs.code_lang }}
        uses: kkp-dfs/dime-github-actions-workflows/lang-setup@main
        with:
          repository: ${{ inputs.repository }}
          base_ref: ${{ inputs.base_ref }}
          target_ref: ${{ inputs.target_ref }}
          language: ${{ inputs.code_lang }}
          go_version: ${{ inputs.go-version }}
          node_version: ${{ inputs.node-version }}
          gh_access_token: ${{ secrets.gh_access_token }}
      - name: Get ECR information
        id: ecr
        uses: kkp-dfs/dime-github-actions-workflows/get-ecr-info@main
      - name: Get parameters
        id: paramater
        run: |
          REF_NAME=$(echo "${GITHUB_REF#refs/heads/}" | sed "s/\//-/g")
          if [ "${{ inputs.event_name }}" == "pull_request" ]; then
            HOST=${{ inputs.application_name }}-pr-${{ inputs.event_number }}.${{ inputs.hostname }}
          elif [ "${REF_NAME}" != "main" ]; then
            HOST=${REF_NAME}.${{ inputs.hostname }}
          elif [[ ! -z "${{ inputs.additional_hostnames }}" ]]; then
            HOST=${{ inputs.hostname }},${{ inputs.additional_hostnames }}
          else
            HOST=${{ inputs.hostname }}
          fi
          echo "::set-output name=ref::$REF_NAME"
          echo "::set-output name=host::$HOST"

  lint:
    name: Run lint
    needs: setup
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Setup ${{ inputs.code_lang }}
        uses: kkp-dfs/dime-github-actions-workflows/lang-setup@main
        with:
          repository: ${{ inputs.repository }}
          base_ref: ${{ inputs.base_ref }}
          target_ref: ${{ inputs.target_ref }}
          language: ${{ inputs.code_lang }}
          go_version: ${{ inputs.go-version }}
          node_version: ${{ inputs.node-version }}
          gh_access_token: ${{ secrets.gh_access_token }}
      - name: Run ${{ inputs.code_lang }} lint
        uses: kkp-dfs/dime-github-actions-workflows/lint@main
        with:
          application_name: ${{ inputs.application_name }}
          language: ${{ inputs.code_lang }}
          slack_channel: ${{ inputs.slack_channel }}
          slack_webhook: ${{ secrets.slack_webhook }}
          linter: gosec
      - name: Run gocyclo linter
        uses: kkp-dfs/dime-github-actions-workflows/lint@main
        if: ${{ inputs.code_lang == 'golang' }}
        continue-on-error: true
        with:
          application_name: ${{ inputs.application_name }}
          language: ${{ inputs.code_lang }}
          slack_channel: ${{ inputs.slack_channel }}
          slack_webhook: ${{ inputs.slack_webhook }}
          linter: gocyclo

  unit-test:
    name: Run unit testing
    if: ${{ inputs.code_lang == 'golang' }}
    needs: setup
    runs-on: [self-hosted, linux, main]
    continue-on-error: true
    container:
      image: 915060398631.dkr.ecr.ap-southeast-1.amazonaws.com/kkp-dfs/ubuntu:21.04
      credentials:
        username: ${{ needs.setup.outputs.ecr_username }}
        password: ${{ needs.setup.outputs.ecr_password }}
      volumes:
        - /var/run/secrets/kubernetes.io/serviceaccount:/var/run/secrets/kubernetes.io/serviceaccount
    steps:
      - name: Setup ${{ inputs.code_lang }}
        uses: kkp-dfs/dime-github-actions-workflows/lang-setup@main
        with:
          repository: ${{ inputs.repository }}
          base_ref: ${{ inputs.base_ref }}
          target_ref: ${{ inputs.target_ref }}
          language: ${{ inputs.code_lang }}
          go_version: ${{ inputs.go-version }}
          node_version: ${{ inputs.node-version }}
          gh_access_token: ${{ secrets.gh_access_token }}
      - name: Run unit tests
        uses: kkp-dfs/dime-github-actions-workflows/unit-test@main
        with:
          minimum_coverage: 80
          application_name: ${{ inputs.application_name }}
          language: ${{ inputs.code_lang }}
          slack_channel: ${{ inputs.slack_channel }}
          slack_webhook: ${{ secrets.slack_webhook }}

  integration-test:
    name: Run integration test
    if: ${{ inputs.code_lang == 'golang' }}
    needs: setup
    runs-on: [self-hosted, linux, sit]
    continue-on-error: true
    container:
      image: 915060398631.dkr.ecr.ap-southeast-1.amazonaws.com/kkp-dfs/ubuntu:21.04
      credentials:
        username: ${{ needs.setup.outputs.ecr_username }}
        password: ${{ needs.setup.outputs.ecr_password }}
      volumes:
        - /var/run/secrets/kubernetes.io/serviceaccount:/var/run/secrets/kubernetes.io/serviceaccount
    steps:
      - name: Setup ${{ inputs.code_lang }}
        uses: kkp-dfs/dime-github-actions-workflows/lang-setup@main
        with:
          repository: ${{ inputs.repository }}
          base_ref: ${{ inputs.base_ref }}
          target_ref: ${{ inputs.target_ref }}
          language: ${{ inputs.code_lang }}
          go_version: ${{ inputs.go-version }}
          node_version: ${{ inputs.node-version }}
          gh_access_token: ${{ secrets.gh_access_token }}
      - name: Run integration tests
        uses: kkp-dfs/dime-github-actions-workflows/integration-test@main
        with:
          application_name: ${{ inputs.application_name }}
          language: ${{ inputs.code_lang }}
          slack_channel: ${{ inputs.slack_channel }}
          slack_webhook: ${{ secrets.slack_webhook }}
          gh_access_token: ${{ secrets.gh_access_token }}

  build:
    name: Build & push docker images to registry
    needs:
      - setup
      - lint
      - unit-test
      - integration-test
    runs-on: [self-hosted, linux,  main]
    if: ${{ (inputs.code_lang == 'golang' && success()) || (inputs.code_lang == 'node' && needs.lint.result == 'success') }}
    container:
      image: 915060398631.dkr.ecr.ap-southeast-1.amazonaws.com/kkp-dfs/ubuntu:21.04
      credentials:
        username: ${{ needs.setup.outputs.ecr_username }}
        password: ${{ needs.setup.outputs.ecr_password }}
      volumes:
        - /var/run/secrets/kubernetes.io/serviceaccount:/var/run/secrets/kubernetes.io/serviceaccount
    outputs:
      image_repo: ${{ steps.build.outputs.image_repo }}
      image_tag: ${{ steps.build.outputs.image_tag }}
    steps:
      - name: Checkout
        uses: kkp-dfs/dime-github-actions-workflows/checkout@main
        with:
          repository: ${{ inputs.repository }}
          base_ref: ${{ inputs.base_ref }}
          target_ref: ${{ inputs.target_ref }}
      - name: Build and push docker image
        id: build
        uses: kkp-dfs/dime-github-actions-workflows/docker-build-push@main
        with:
          repository: ${{ needs.setup.outputs.ecr_repository }}
          token: ${{ needs.setup.outputs.ecr_token }}
          gh_access_token: ${{ secrets.gh_access_token }}

  deploy_pr:
    name: Apply argo application to kubernetes cluster
    needs:
      - setup
      - build
    runs-on: [self-hosted, linux, deployment, main]
    if: ${{ (needs.setup.outputs.ref != 'main') && ((inputs.code_lang == 'golang' && success()) || (inputs.code_lang == 'node' && needs.lint.result == 'success')) }}
    timeout-minutes: 3
    environment:
      name: ${{ needs.setup.outputs.ref }}
      url: ${{ needs.setup.outputs.endpoint }}"
    container:
      image: 915060398631.dkr.ecr.ap-southeast-1.amazonaws.com/kkp-dfs/ubuntu:20.04
      credentials:
        username: ${{ needs.setup.outputs.ecr_username }}
        password: ${{ needs.setup.outputs.ecr_password }}
      volumes:
        - /var/run/secrets/kubernetes.io/serviceaccount:/var/run/secrets/kubernetes.io/serviceaccount
    steps:
      - name: Apply Dime ArgoCD Application Helm
        uses: kkp-dfs/dime-github-actions-workflows/deploy-app@main
        with:
          environment: sit
          release_name: ${{ inputs.application_name }}-${{ needs.setup.outputs.ref }}
          helm_ref: ${{ inputs.helm_ref }}
          namespace: ${{ inputs.application_name }}-${{ needs.setup.outputs.ref }}
          application_name: ${{ inputs.application_name }}
          endpoint: ${{ needs.setup.outputs.endpoint }}
          image_repo: ${{ needs.build.outputs.image_repo }}
          image_tag: ${{ needs.build.outputs.image_tag }}
          slack_channel: ${{ inputs.slack_channel }}
          slack_webhook: ${{ secrets.slack_webhook }}
          gh_access_token: ${{ secrets.gh_access_token }}

  deploy:
    name: Apply argo application to kubernetes cluster
    needs:
      - setup
      - build
    runs-on: [self-hosted, linux, deployment, main]
    if: ${{ (needs.setup.outputs.ref == 'main') && ((inputs.code_lang == 'golang' && success()) || (inputs.code_lang == 'node' && needs.lint.result == 'success')) }}
    timeout-minutes: 3
    strategy:
      matrix:
        environment: ["sit", "uat"]
    environment:
      name: ${{ matrix.environment }}
      url: ${{ needs.setup.outputs.endpoint }}"
    container:
      image: 915060398631.dkr.ecr.ap-southeast-1.amazonaws.com/kkp-dfs/ubuntu:20.04
      credentials:
        username: ${{ needs.setup.outputs.ecr_username }}
        password: ${{ needs.setup.outputs.ecr_password }}
      volumes:
        - /var/run/secrets/kubernetes.io/serviceaccount:/var/run/secrets/kubernetes.io/serviceaccount
    steps:
      - name: Apply Dime ArgoCD Application Helm
        uses: kkp-dfs/dime-github-actions-workflows/deploy-app@main
        with:
          environment: ${{ matrix.environment }}
          release_name: ${{ inputs.application_name }}-${{ needs.setup.outputs.ref }}
          helm_ref: ${{ inputs.helm_ref }}
          namespace: ${{ inputs.namespace }}
          application_name: ${{ inputs.application_name }}
          endpoint: ${{ needs.setup.outputs.endpoint }}
          image_repo: ${{ needs.build.outputs.image_repo }}
          image_tag: ${{ needs.build.outputs.image_tag }}
          slack_channel: ${{ inputs.slack_channel }}
          slack_webhook: ${{ secrets.slack_webhook }}
          gh_access_token: ${{ secrets.gh_access_token }}

  db_migration:
    name: Migrate database
    needs:
      - setup
      - build
    runs-on: [self-hosted, linux, deployment, main]
    if: ${{ inputs.migration && ((inputs.code_lang == 'golang' && success()) || (inputs.code_lang == 'node' && needs.lint.result == 'success')) }}
    strategy:
      matrix:
        environment: ["sit", "uat"]
    environment:
      name: ${{ matrix.environment }}
    container:
      image: 915060398631.dkr.ecr.ap-southeast-1.amazonaws.com/kkp-dfs/dbmate:1.12
      credentials:
        username: ${{ needs.setup.outputs.ecr_username }}
        password: ${{ needs.setup.outputs.ecr_password }}
      volumes:
        - /var/run/secrets/kubernetes.io/serviceaccount:/var/run/secrets/kubernetes.io/serviceaccount
    steps:
      - name: Migrate database
        uses: kkp-dfs/dime-github-actions-workflows/db-migration@main
        with:
          environment: ${{ matrix.environment }}
          application_name: ${{ inputs.application_name }}
          directory: ${{ inputs.migrate_dir }}
          schema: ${{ inputs.migrate_schema }}
          helm_ref: ${{ inputs.helm_ref }}
          gh_access_token: ${{ secrets.GH_ACCESS_TOKEN }}