name: Dime App Release

on:
  workflow_call:
    inputs:
      target_env:
        description: Target environment of the application
        required: true
        type: string
      repository:
        description: The owner and repository name
        required: false
        type: string
        default: ${{ github.repository }}
      base_ref:
        description: The branch or tag ref or commit SHA that be base code.
        required: false
        type: string
        default: ${{ github.base_ref || 'main' }}
      platform:
        description: ios or android
        type: string
        required: true

    secrets:
      gh_access_token:
        required: true

jobs:
  prepare:
    name: Prepare environment secret file
    runs-on: [self-hosted, linux, main, deployment]
    steps:
      - uses: AutoModality/action-clean@v1
      - uses: kkp-dfs/dime-github-actions-workflows/checkout@main
        with:
          repository: ${{ inputs.repository }}
          base_ref: ${{ inputs.base_ref }}
      - uses: kkp-dfs/dime-github-actions-workflows/common@main
        with:
          gh_access_token: ${{ inputs.gh_access_token }}
      - name: Generate environment secret file
        run: |
          JWT=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
          echo "{\"role\":\"kubernetes-actions-runner\",\"jwt\":\"$JWT\"}" > payload.json
          TOKEN=$(curl -d @payload.json https://vault.mydime.tech/v1/auth/kubernetes/actions-runner/dime-main/login | jq -r '.auth.client_token')
          DATA=$(curl -H "X-VAULT-TOKEN:$TOKEN" https:/vault.mydime.tech/v1/secrets/data/services/dime-app/${{ inputs.target_env }})

          export DIRECTUS_ACCESS_TOKEN=$(echo $DATA | jq -r ".data.data.DIRECTUS_ACCESS_TOKEN")
          export PASSWORD_HASHING_SALT=$(echo $DATA | jq -r ".data.data.PASSWORD_HASHING_SALT")
          export SECURE_ED25519_PUBLIC_KEY=$(echo $DATA | jq -r ".data.data.SECURE_ED25519_PUBLIC_KEY")
          export SECURE_RSA_PUBLIC_KEY=$(echo $DATA | jq -r ".data.data.SECURE_RSA_PUBLIC_KEY")
          export SIGN_IN_RSA_PUBLIC_KEY=$(echo $DATA | jq -r ".data.data.SIGN_IN_RSA_PUBLIC_KEY")

          curl -L https://github.com/a8m/envsubst/releases/download/v1.2.0/envsubst-`uname -s`-`uname -m` -o envsubst
          chmod +x envsubst
          ./envsubst < environment_secret_template.yaml > environment_secret_${{ inputs.target_env }}.yaml
      - name: Create key properties
        run: |
          JWT=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
          echo "{\"role\":\"kubernetes-actions-runner\",\"jwt\":\"$JWT\"}" > payload.json
          TOKEN=$(curl -d @payload.json https://vault.mydime.tech/v1/auth/kubernetes/actions-runner/dime-main/login | jq -r '.auth.client_token')
          DATA=$(curl -H "X-VAULT-TOKEN:$TOKEN" https:/vault.mydime.tech/v1/infrastructure/data/mac-mini-01)

          export KEYSTORE_PASSWORD=$(echo $DATA | jq -r ".data.data.android_release_keystore_password")
          cat <<EOF > key.properties
          keyAlias=release
          keyPassword=${KEYSTORE_PASSWORD}
          storeFile=/Users/dime/.android/release.keystore
          storePassword=${KEYSTORE_PASSWORD}
          EOF
      - uses: actions/upload-artifact@v3
        with:
          name: dime_app_${{ inputs.target_env }}_${{ github.sha }}
          path: |
            environment_secret_${{ inputs.target_env }}.yaml
            key.properties
          retention-days: 1
  fastlane_build:
    name: Build ${{ inputs.platform }}
    runs-on: [self-hosted, macOS]
    needs: [prepare]
    steps:
      - uses: kkp-dfs/dime-github-actions-workflows/checkout@main
        with:
          repository: ${{ inputs.repository }}
          base_ref: ${{ inputs.base_ref }}
      - uses: kkp-dfs/dime-github-actions-workflows/common@main
        with:
          gh_access_token: ${{ inputs.gh_access_token }}
      - uses: actions/download-artifact@v3
        with:
          name: dime_app_${{ inputs.target_env }}_${{ github.sha }}
      # - run: curl -X DELETE -H "Accept:application/vnd.github.v3+json" https://api.github.com/repos/${{ github.repository }}/actions/artifacts/ARTIFACT_ID
      - name: General set up
        run: |
          export PATH=/opt/homebrew/opt/openjdk/bin:/opt/homebrew/bin:/opt/homebrew/sbin:/opt/flutter/bin:$PATH
          cat <<EOF > $HOME/.netrc
          machine github.com
            login ${{ secrets.gh_access_token }}
            password x-oauth-basic
          EOF
          chmod 600 $HOME/.netrc
      - name: Set up for android
        if: ${{ inputs.platform == 'android' }}
        run: |
          export PATH=/opt/homebrew/opt/openjdk/bin:/opt/homebrew/bin:/opt/homebrew/sbin:/opt/flutter/bin:$PATH
          export RBENV_VERSION=2.7.5
          export LC_ALL=en_US.UTF-8
          export LANG=en_US.UTF-8
          source /Users/dime/.bash_profile

          cat <<EOF > ./android/local.properties
          sdk.dir=/Users/dime/Library/Android/sdk
          flutter.sdk=/opt/flutter
          flutter.buildMode=debug
          flutter.versionName=1.0.0
          flutter.versionCode=1
          EOF

          mv key.properties ./android/
          cp /Users/dime/dime_app_release_files/google-services-${{ inputs.target_env }}.json ./android/app/google-services.json
          cp /Users/dime/dime_app_release_files/service_credentials_${{ inputs.target_env }}.json ./android/app/src/${{ inputs.target_env }}/service_credentials.json

          cd android
          gradle wrapper
          bundle install
      - name: Build app
        run: |
          export PATH=/opt/homebrew/opt/openjdk/bin:/opt/homebrew/bin:/opt/homebrew/sbin:/opt/flutter/bin:$PATH
          export RBENV_VERSION=2.7.5
          export LC_ALL=en_US.UTF-8
          export LANG=en_US.UTF-8
          source /Users/dime/.bash_profile
          make gen-config-${{ inputs.target_env }}

          echo '### build bundle ###'
          flutter build appbundle --flavor ${{ inputs.target_env }}

          cd ${{ inputs.platform }}
          bundle update fastlane
          bundle exec fastlane -v
          bundle exec fastlane update_plugins
          bundle exec fastlane ${{ env.LANE }}
        env:
          GITHUB_TOKEN: ${{ secrets.gh_access_token }}
          LANE: '${{ inputs.platform }}_${{ inputs.target_env }}_app'
