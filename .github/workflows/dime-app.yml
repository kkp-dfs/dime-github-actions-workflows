name: Dime App workflow

on:
  workflow_call:
    inputs:
      application_name:
        description: Name of application
        required: true
        type: string
      repository:
        description: The owner and repository name
        required: false
        type: string
        default: ${{ github.repository }}
      base_ref:
        description: The branch or tag ref or commit SHA that be base code.
        required: false
        type: string
        default: ${{ github.base_ref || 'main' }}
      target_ref:
        description: The branch or tag ref or commit SHA that will be merged to base code.
        required: false
        type: string
        default: ${{ github.head_ref || github.ref_name }}
      minimum_coverage:
        description: "The minimum coverage to pass the check. Optional. Default: `0` (always passes)"
        required: false
        type: number
        default: 80

    secrets:
      gh_access_token:
        required: true
      slack_channels:
        description: The slack channel that send notification.
        required: true

env:
  SLACK_ICON: https://avatars.githubusercontent.com/u/90231066?s=200&v=4
  SLACK_USERNAME: GitHub Actions

jobs:
  prepare:
    name: Prepare parameters
    runs-on: [self-hosted, linux, build]
    outputs:
      ecr_username: ${{ steps.paramater.outputs.username }}
      ecr_password: ${{ steps.paramater.outputs.password }}
      matrix: ${{ steps.paramater.outputs.matrix }}
    steps:
      - id: paramater
        run: |
          TOKEN=$(aws ecr get-authorization-token --region ap-southeast-1 --output text \
          --query 'authorizationData[].authorizationToken' | base64 -d)
          echo "::add-mask::$TOKEN"
          echo "::set-output name=username::$(echo $TOKEN | cut -d: -f1)"
          echo "::set-output name=password::$(echo $TOKEN | cut -d: -f2)"
          echo "::set-output name=matrix::$(echo "{\"include\": ${{ secrets.SLACK_CHANNELS }} }")"

  unit-test:
    name: Run unit testing
    needs: prepare
    runs-on: [self-hosted, linux, deployment]
    container:
      image: 915060398631.dkr.ecr.ap-southeast-1.amazonaws.com/flutter:2.8.1-stable
      credentials:
        username: ${{ needs.prepare.outputs.ecr_username }}
        password: ${{ needs.prepare.outputs.ecr_password }}
      volumes:
        - /var/run/secrets/kubernetes.io/serviceaccount:/var/run/secrets/kubernetes.io/serviceaccount
    steps:
      - name: Cache module and tools
        uses: actions/cache@v2
        with:
          path: |
            /opt/flutter/.pub-cache
          key: ${{ runner.os }}-flutter-${{ inputs.repository }}-${{ hashFiles('**/pubspec.yaml') }}
          restore-keys: |
            ${{ runner.os }}-flutter-${{ inputs.repository }}-
    
      - name: Run flutter unit-test
        uses: kkp-dfs/dime-github-actions-workflows/flutter-testing@main
        with:
          application_name: ${{ inputs.application_name }}
          repository: ${{ inputs.repository }}
          base_ref: ${{ inputs.base_ref }}
          target_ref: ${{ inputs.target_ref }}
          artifact_name: unittest-coverage-report
          gh_access_token: ${{ secrets.gh_access_token }}
          minimum_coverage: 80

  pass:
    name: Success Notification
    needs:
      - prepare
      - unit-test
    runs-on: ubuntu-latest
    if: ${{ success() }}
    strategy:
      matrix: ${{ fromJSON(needs.prepare.outputs.matrix) }}
    env:
      SLACK_CHANNEL: ${{ matrix.name }}
      SLACK_WEBHOOK: ${{ matrix.webhook }}
    steps:
      - uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_COLOR: good
          SLACK_MESSAGE: This repo passed all test cases of unit-test and there is coverage over than ${{ inputs.minimum_coverage }}%
          SLACK_TITLE: ${{ inputs.application_name }} unit-test is PASS

  fail:
    name: Failure Notification
    needs:
      - prepare
      - unit-test
    runs-on: ubuntu-latest
    if: ${{ failure() }}
    strategy:
      matrix: ${{ fromJSON(needs.prepare.outputs.matrix) }}
    env:
      SLACK_CHANNEL: ${{ matrix.name }}
      SLACK_WEBHOOK: ${{ matrix.webhook }}
    steps:
      - uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_COLOR: danger
          SLACK_MESSAGE: This repo fail on some test cases of unit-test or there is coverage less than ${{ inputs.minimum_coverage }}%
          SLACK_TITLE: ${{ inputs.application_name }} unit-test is FAIL
